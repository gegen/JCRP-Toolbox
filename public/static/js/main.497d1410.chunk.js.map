{"version":3,"sources":["MenuApi.js","App.js","serviceWorker.js","index.js"],"names":["Menu","title","children","useState","display","setDisplay","subMenuOrder","setSubMenuOrder","listIndex","setlistIndex","menuTitle","menuStructure","i","length","props","label","handleMessage","useCallback","event","data","type","undefined","toogle","console","error","value","currentItem","Children","toArray","SubMenu","prev","onSelect","Axios","post","JSON","stringify","filter","elm","index","useEffect","window","addEventListener","removeEventListener","className","map","child","selected","style","float","fontWeight","Item","App","id","setId","name","setName","playerNearby","setplayerNearby","setSpikes","double","spawnObject","obj","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.497d1410.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback, Children } from 'react';\r\nimport Axios from 'axios';\r\n\r\nexport default function Menu({ title, children }) {\r\n    const [display, setDisplay] = useState(false);\r\n    const [subMenuOrder, setSubMenuOrder] = useState([]);\r\n    const [listIndex, setlistIndex] = useState(0);\r\n\r\n    let menuTitle = title\r\n    let menuStructure = children\r\n\r\n    for (let i = 0; i < subMenuOrder.length; i++) {\r\n        if (i === subMenuOrder.length - 1) menuTitle = menuStructure[subMenuOrder[i]].props.title ?? menuStructure[subMenuOrder[i]].props.label\r\n        menuStructure = menuStructure[subMenuOrder[i]].props.children\r\n    }\r\n\r\n    const handleMessage = useCallback(event => {\r\n        if (!event.data) return\r\n        const data = event.data\r\n        switch (data.type) {\r\n            case 'display':\r\n                data.toogle !== undefined ? setDisplay(data.toogle) : console.error(\"Invalid NUI display toogle\");\r\n                break\r\n            case 'navigation':\r\n                if (data.value === 'Up') {\r\n                    listIndex === 0 ? setlistIndex(menuStructure.length - 1) : setlistIndex(listIndex - 1)\r\n                } else if (data.value === 'Down') {\r\n                    listIndex === menuStructure.length - 1 ? setlistIndex(0) : setlistIndex(listIndex + 1)\r\n                } else if (data.value === \"Enter\") {\r\n                    const currentItem = Children.toArray(menuStructure)[listIndex]\r\n                    if (currentItem.type === SubMenu) {\r\n                        setlistIndex(0)\r\n                        setSubMenuOrder(prev => [...prev, listIndex])\r\n                    }\r\n                    if (currentItem.props.onSelect) currentItem.props.onSelect()\r\n                } else if (data.value === \"Back\") {\r\n                    if (subMenuOrder.length === 0) {\r\n                        Axios.post('http://jcrp-toolbox/close', JSON.stringify())\r\n                    } else {\r\n                        setlistIndex(subMenuOrder[subMenuOrder.length - 1])\r\n                        setSubMenuOrder(subMenuOrder.filter((elm, index) => index < subMenuOrder.length - 1))\r\n                    }\r\n                }\r\n                break\r\n            default:\r\n        }\r\n    }, [menuStructure, listIndex, subMenuOrder, setlistIndex])\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('message', handleMessage)\r\n        return () => {\r\n            window.removeEventListener('message', handleMessage)\r\n        }\r\n    }, [handleMessage])\r\n\r\n    return (\r\n        display &&\r\n        <div className='Container'>\r\n            <div className='title'>{menuTitle}</div>\r\n            <ul>\r\n                {Children.map(menuStructure, (child, index) => {\r\n                    const selected = index === listIndex\r\n                    const { label } = child.props\r\n                    if (child.type === SubMenu) {\r\n                        return <li className={selected ? 'selected' : ''}>{label} <span style={{ float: 'right', fontWeight: 'bold' }}>{'>'}</span></li>\r\n                    }\r\n                    return <li className={selected ? 'selected' : ''}>{label}</li>\r\n                })}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function Item() {\r\n    return null\r\n}\r\n\r\nexport function SubMenu() {\r\n    return null\r\n}","import React, { useState, useEffect, useCallback } from 'react';\r\nimport Axios from 'axios';\r\nimport Menu, { Item, SubMenu } from './MenuApi';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n    const [id, setId] = useState(0);\r\n    const [name, setName] = useState(\"Invalid\");\r\n    const [playerNearby, setplayerNearby] = useState(false);\r\n\r\n    const handleMessage = useCallback(event => {\r\n        if (!event.data) return\r\n        const data = event.data\r\n        switch (data.type) {\r\n            case 'closestPlayer':\r\n                if (data.id === undefined || data.name === undefined) {\r\n                    setplayerNearby(false)\r\n                } else {\r\n                    setId(data.id)\r\n                    setName(data.name)\r\n                    setplayerNearby(true)\r\n                }\r\n                break\r\n            default:\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('message', handleMessage)\r\n        return () => {\r\n            window.removeEventListener('message', handleMessage)\r\n        }\r\n    }, [handleMessage])\r\n\r\n    function toggleHandsUp() {\r\n        Axios.post('http://jcrp-toolbox/executeCommand', JSON.stringify('e handsup'))\r\n    }\r\n    function toggleCuff() {\r\n        if (!playerNearby) return Axios.post('http://jcrp-toolbox/displayMsg', JSON.stringify('No player nearby.'))\r\n        Axios.post('http://jcrp-toolbox/executeCommand', JSON.stringify('cuff ' + id))\r\n    }\r\n    function toggleDrag() {\r\n        if (!playerNearby) return Axios.post('http://jcrp-toolbox/displayMsg', JSON.stringify('No player nearby.'))\r\n        Axios.post('http://jcrp-toolbox/executeCommand', JSON.stringify('drag ' + id))\r\n    }\r\n    function setSpikes(double) {\r\n        Axios.post('http://jcrp-toolbox/setSpikes', JSON.stringify(double))\r\n    }\r\n    function removeSpikes() {\r\n        Axios.post('http://jcrp-toolbox/removeSpikes', JSON.stringify())\r\n    }\r\n    function spawnObject(obj) {\r\n        Axios.post('http://jcrp-toolbox/spawnObject', JSON.stringify(obj))\r\n    }\r\n    function deleteCloseObjects() {\r\n        Axios.post('http://jcrp-toolbox/deleteCloseObjects', JSON.stringify())\r\n    }\r\n\r\n    return (\r\n        <Menu title=\"JCRP Toolbox\">\r\n            <SubMenu label=\"Actions\" title={playerNearby ? `[${id}] ${name}` : 'No player nearby.'}>\r\n                <Item label=\"Cuff / Uncuff\" onSelect={toggleCuff} />\r\n                <Item label=\"Drag\" onSelect={toggleDrag} />\r\n            </SubMenu>\r\n            <SubMenu label=\"Spikes\">\r\n                <Item label=\"Place Spikes\" onSelect={() => setSpikes(false)} />\r\n                <Item label=\"Place 2x Spikes\" onSelect={() => setSpikes(true)} />\r\n                <Item label=\"Remove Spikes\" onSelect={removeSpikes} />\r\n            </SubMenu>\r\n            <SubMenu label=\"Objects\" title=\"Object Spawner\">\r\n                <Item label=\"Police Barrier\" onSelect={() => spawnObject('policeBarrier')} />\r\n                <Item label=\"Road Barrier\" onSelect={() => spawnObject('roadBarrier')} />\r\n                <Item label=\"Road Barrier Arrow\" onSelect={() => spawnObject('roadBarrierArrow')} />\r\n                <Item label=\"Traffic Cone\" onSelect={() => spawnObject('cone')} />\r\n                <Item label=\"Traffic Barrel\" onSelect={() => spawnObject('trafficBarrel')} />\r\n                <Item label=\"Remove Close Objects\" onSelect={deleteCloseObjects} />\r\n            </SubMenu>\r\n            <Item label=\"Hands up\" onSelect={toggleHandsUp} />\r\n        </Menu>\r\n        /*\r\n        display &&\r\n        <div className='Container'>\r\n            <div className='title'>{`[${id}] ${name}`}</div>\r\n            <ul>\r\n                {listItems.map((item, index) => (\r\n                <li key={index} className={index === listIndex ? 'selected' : ''}>{item.label}</li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n        */\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './reset.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}